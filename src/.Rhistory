# drop intermediate variables
exprdat = exprdat %>% dplyr::select(-squrd_nTPM,-sum_squrd_expr)
### CTM calculation
# calculate rank of expression in sammples by gene
exprdat <- exprdat %>%
arrange(Gene.name, desc(nTPM)) %>%
group_by(Gene.name) %>%
mutate(rank = rank(desc(nTPM), ties.method = "first"))
# calculate CTM
varnames = c() # initiate the names for the CTM for each value of k
for (i in (2:k)){
varnames[i] = paste0("CTM_",i)
}
varnames = varnames[-c(1)] # remove first NA
for (i in (2:k)){   # calculer le CTM dans une nouvelle variable pour chaque valeur de k
CTM = exprdat %>%
filter(rank <= i) %>%
group_by(Gene.name) %>%
summarise(CTM = sqrt(sum(SPM^2)))
exprdat = left_join(exprdat,CTM, by = "Gene.name")
}
colnames(exprdat)[(ncol(exprdat)-k+2):ncol(exprdat)] = varnames # renommer de maniere iterative
for (i in (2:(k))){   # mettre CTM = 0 si au dessus de k
vec = data.frame(exprdat[,"rank"]<=i, exprdat[,varnames[i-1]])
vec[,2] = ifelse(vec$rank, vec[,2], 0)
exprdat[,paste0("CTM_",i)] = vec[,2]
}
# calculate max CTM
exprdat = exprdat %>% rowwise() %>%
mutate(CTM=max(c_across(varnames[1]:last(varnames))))
# remove intermediary variables
exprdat[,-varnames]
varnames
exprdat[,-c(varnames)]
# remove intermediary variables
exprdat %>% select(-varnames)
exprdat = gene_keys[gene_keys$Gene.name %in% gene_list,]
# log transform of the HPA dataset
#exprdat = exprdat %>% mutate(nTPM = nTPM * 10) # add a 10x to capture expression of low (<1) expressed genes
exprdat = exprdat %>% mutate(logTPM = ifelse(nTPM < 1, 1, log2(nTPM))) # pass to the log2
### SPM calculation
# for each gene, calculate the sum of all squared gene expression in TPM in all samples
sum_squrd_expr =  exprdat %>%
group_by(Gene.name) %>%
summarise(sum_squrd_expr = sum(nTPM^2))
exprdat = left_join(exprdat, sum_squrd_expr, by = "Gene.name")
# calculate squared gene expression in TPM by sample
exprdat = exprdat %>% mutate(squrd_nTPM = nTPM^2)
# calculate SPM
exprdat = exprdat %>% mutate(SPM = squrd_nTPM/sum_squrd_expr)
# drop intermediate variables
exprdat = exprdat %>% dplyr::select(-squrd_nTPM,-sum_squrd_expr)
### CTM calculation
# calculate rank of expression in sammples by gene
exprdat <- exprdat %>%
arrange(Gene.name, desc(nTPM)) %>%
group_by(Gene.name) %>%
mutate(rank = rank(desc(nTPM), ties.method = "first"))
# calculate CTM
varnames = c() # initiate the names for the CTM for each value of k
for (i in (2:k)){
varnames[i] = paste0("CTM_",i)
}
varnames = varnames[-c(1)] # remove first NA
for (i in (2:k)){   # calculer le CTM dans une nouvelle variable pour chaque valeur de k
CTM = exprdat %>%
filter(rank <= i) %>%
group_by(Gene.name) %>%
summarise(CTM = sqrt(sum(SPM^2)))
exprdat = left_join(exprdat,CTM, by = "Gene.name")
}
colnames(exprdat)[(ncol(exprdat)-k+2):ncol(exprdat)] = varnames # renommer de maniere iterative
for (i in (2:(k))){   # mettre CTM = 0 si au dessus de k
vec = data.frame(exprdat[,"rank"]<=i, exprdat[,varnames[i-1]])
vec[,2] = ifelse(vec$rank, vec[,2], 0)
exprdat[,paste0("CTM_",i)] = vec[,2]
}
# calculate max CTM
exprdat = exprdat %>% rowwise() %>%
mutate(CTM=max(c_across(varnames[1]:last(varnames))))
# remove intermediary variables
exprdat = exprdat %>% select(-varnames)
View(exprdat)
k=3
exprdat = gene_keys[gene_keys$Gene.name %in% gene_list,]
# log transform of the HPA dataset
#exprdat = exprdat %>% mutate(nTPM = nTPM * 10) # add a 10x to capture expression of low (<1) expressed genes
exprdat = exprdat %>% mutate(logTPM = ifelse(nTPM < 1, 1, log2(nTPM))) # pass to the log2
### SPM calculation
# for each gene, calculate the sum of all squared gene expression in TPM in all samples
sum_squrd_expr =  exprdat %>%
group_by(Gene.name) %>%
summarise(sum_squrd_expr = sum(nTPM^2))
exprdat = left_join(exprdat, sum_squrd_expr, by = "Gene.name")
# calculate squared gene expression in TPM by sample
exprdat = exprdat %>% mutate(squrd_nTPM = nTPM^2)
# calculate SPM
exprdat = exprdat %>% mutate(SPM = squrd_nTPM/sum_squrd_expr)
# drop intermediate variables
exprdat = exprdat %>% dplyr::select(-squrd_nTPM,-sum_squrd_expr)
### CTM calculation
# calculate rank of expression in sammples by gene
exprdat <- exprdat %>%
arrange(Gene.name, desc(nTPM)) %>%
group_by(Gene.name) %>%
mutate(rank = rank(desc(nTPM), ties.method = "first"))
# calculate CTM
varnames = c() # initiate the names for the CTM for each value of k
for (i in (2:k)){
varnames[i] = paste0("CTM_",i)
}
varnames = varnames[-c(1)] # remove first NA
for (i in (2:k)){   # calculer le CTM dans une nouvelle variable pour chaque valeur de k
CTM = exprdat %>%
filter(rank <= i) %>%
group_by(Gene.name) %>%
summarise(CTM = sqrt(sum(SPM^2)))
exprdat = left_join(exprdat,CTM, by = "Gene.name")
}
colnames(exprdat)[(ncol(exprdat)-k+2):ncol(exprdat)] = varnames # renommer de maniere iterative
for (i in (2:(k))){   # mettre CTM = 0 si au dessus de k
vec = data.frame(exprdat[,"rank"]<=i, exprdat[,varnames[i-1]])
vec[,2] = ifelse(vec$rank, vec[,2], 0)
exprdat[,paste0("CTM_",i)] = vec[,2]
}
# calculate max CTM
exprdat = exprdat %>% rowwise() %>%
mutate(CTM=max(c_across(varnames[1]:last(varnames))))
# remove intermediary variables
exprdat = exprdat %>% select(-varnames)
View(exprdat)
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
read.csv2("test.csv")
ds = read.csv2("test.csv", sep = ",")
View(ds)
test= ds %>% group_by(Gene.name) %>% count(Enrich_Tau) %>% ungroup() %>% pull(Enrich_Tau) %>% as.factor() %>% table() %>% prop.table())[["Tissue_restricted"]] %>% round(3)
test= (ds %>% group_by(Gene.name) %>% count(Enrich_Tau) %>% ungroup() %>% pull(Enrich_Tau) %>% as.factor() %>% table() %>% prop.table())[["Tissue_restricted"]] %>% round(3)
test = (ds %>% group_by(Gene.name) %>% count(Enrich_Tau)
)
View(test)
test = (ds %>% group_by(Gene.name) %>% count(Enrich_Tau) %>% filter(Enrich_Tau == "Tissue_enriched")
View(test)
test = (ds %>% group_by(Gene.name) %>% count(Enrich_Tau) %>% filter(Enrich_Tau == "Tissue_enriched"))
View(test)
test = (ds %>% group_by(Gene.name) %>% count(Enrich_Tau) %>% filter(Enrich_Tau == "Tissue_enriched") %>% nrow())
View(ds)
test
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
runApp()
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
runApp()
50+22
72/161
runApp()
runApp()
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
ds %>% filter(Enrich_Tau == ifelse(TRA_or_TSA == "TRA", "Tissue_restricted", "Tissue_enriched")) %>%
ungroup() %>% count(Tissue)
TRA_or_TSA = "TRA"
ds %>% filter(Enrich_Tau == ifelse(TRA_or_TSA == "TRA", "Tissue_restricted", "Tissue_enriched")) %>%
ungroup() %>% count(Tissue)
ds %>% filter(Enrich_Tau == ifelse(TRA_or_TSA == "TRA", "Tissue_restricted", "Tissue_enriched")) %>%
ungroup()
ds %>% filter(Enrich_Tau == ifelse(TRA_or_TSA == "TRA", "Tissue_restricted", "Tissue_enriched"))
test = ds %>% filter(Enrich_Tau == ifelse(TRA_or_TSA == "TRA", "Tissue_restricted", "Tissue_enriched"))
View(test)
test = ds %>% filter(Enrich_Tau == ifelse(TRA_or_TSA == "TRA", "Tissue_restricted", "Tissue_enriched")) %>%
ungroup() %>% count(Tissue)
View(test)
rain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
0.061
0.061*10000
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.tsv")
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.txt")
View(gene_keys)
# DEVVVVVV
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.txt", sep = " ")
gene_keys[,5] = NULL
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
View(gene_keys)
gene_keys = read.delim2("data/HPA_RNA_consensus_dataset.txt", sep = " ")
colnames(gene_keys) = c("Gene","Gene.name", "Tissue", "nTPM")
gene_keys[,5] = NULL
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
View(gene_keys)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# load brain tissue list
brain_tissue = c("cerebral cortex", "pituitary gland","amygdala","choroid plexus", "basal ganglia", "cerebellum", "hypothalamus","hippocampal formation", "medulla oblongata", "thalamus", "midbrain", "pons", "white matter")
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggprism)
library(shinythemes)
library(googlesheets4)
?selectInput
# Load packages ----
library(shiny)
library(shinydashboard)
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
gene_keys = read.delim2("data/Mouse_Human_merged_expression_data.txt")
View(gene_keys)
gene_keys = read.delim2("data/Mouse_Human_merged_expression_data.txt", sep = " ")
View(gene_keys)
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
View(gene_keys)
# load brain tissue list for the pool_brain function
brain_tissue = read.csv2("data/brain_tissues.csv")
View(brain_tissue)
# load brain tissue list for the pool_brain function
brain_tissue = read.csv2("data/brain_tissues.csv") %>% pull(Tissue)
# Load packages ----
library(shiny)
library(shinydashboard)
library(dplyr)
# Load datasets of AIRE dependant genes
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
# Load datasets of gene expression in mouse and human
gene_keys = read.delim2("data/Mouse_Human_merged_expression_data.txt", sep = " ")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list for the pool_brain function
brain_tissue = read.csv2("data/brain_tissues.csv") %>% pull(Tissue)
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
library(dplyr)
# Load datasets of AIRE dependant genes
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
# Load datasets of gene expression in mouse and human
gene_keys = read.delim2("data/Mouse_Human_merged_expression_data.txt", sep = " ")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list for the pool_brain function
brain_tissue = read.csv2("data/brain_tissues.csv") %>% pull(Tissue)
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
library(dplyr)
# Load datasets of AIRE dependant genes
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
# Load datasets of gene expression in mouse and human
gene_keys = read.delim2("data/Mouse_Human_merged_expression_data.txt", sep = " ")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list for the pool_brain function
brain_tissue = read.csv2("data/brain_tissues.csv") %>% pull(Tissue)
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
runApp()
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
library(dplyr)
# Load datasets of AIRE dependant genes
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
# Load datasets of gene expression in mouse and human
gene_keys = read.delim2("data/Mouse_Human_merged_expression_data.txt", sep = " ")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list for the pool_brain function
brain_tissue = read.csv2("data/brain_tissues.csv") %>% pull(Tissue)
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
# Load packages ----
library(shiny)
library(shinydashboard)
library(dplyr)
# Load datasets of AIRE dependant genes
AIREdep = read.csv2("data/TRA_AIRE_dependency.csv")
# Load datasets of gene expression in mouse and human
gene_keys = read.delim2("data/Mouse_Human_merged_expression_data.txt", sep = " ")
colnames(gene_keys)[2] = "Gene.name"
gene_keys$nTPM = as.numeric(gene_keys$nTPM)
# load brain tissue list for the pool_brain function
brain_tissue = read.csv2("data/brain_tissues.csv") %>% pull(Tissue)
# Source helper functions -----
source("Genes_to_tissue_enrich.R", local = TRUE)
runApp()
